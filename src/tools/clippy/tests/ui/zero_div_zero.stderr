error: equal expressions as operands to `/`
 --> $DIR/zero_div_zero.rs:7:15
  |
7 |     let nan = 0.0 / 0.0;
  |               ^^^^^^^^^
  |
  = note: #[deny(eq_op)] on by default

error: constant division of 0.0 with 0.0 will always result in NaN
 --> $DIR/zero_div_zero.rs:7:15
  |
7 |     let nan = 0.0 / 0.0;
  |               ^^^^^^^^^
  |
  = note: `-D zero-divided-by-zero` implied by `-D warnings`
  = help: Consider using `std::f64::NAN` if you would like a constant representing NaN

error: equal expressions as operands to `/`
 --> $DIR/zero_div_zero.rs:8:19
  |
8 |     let f64_nan = 0.0 / 0.0f64;
  |                   ^^^^^^^^^^^^

error: constant division of 0.0 with 0.0 will always result in NaN
 --> $DIR/zero_div_zero.rs:8:19
  |
8 |     let f64_nan = 0.0 / 0.0f64;
  |                   ^^^^^^^^^^^^
  |
  = help: Consider using `std::f64::NAN` if you would like a constant representing NaN

error: equal expressions as operands to `/`
 --> $DIR/zero_div_zero.rs:9:25
  |
9 |     let other_f64_nan = 0.0f64 / 0.0;
  |                         ^^^^^^^^^^^^

error: constant division of 0.0 with 0.0 will always result in NaN
 --> $DIR/zero_div_zero.rs:9:25
  |
9 |     let other_f64_nan = 0.0f64 / 0.0;
  |                         ^^^^^^^^^^^^
  |
  = help: Consider using `std::f64::NAN` if you would like a constant representing NaN

error: equal expressions as operands to `/`
  --> $DIR/zero_div_zero.rs:10:28
   |
10 |     let one_more_f64_nan = 0.0f64/0.0f64;
   |                            ^^^^^^^^^^^^^

error: constant division of 0.0 with 0.0 will always result in NaN
  --> $DIR/zero_div_zero.rs:10:28
   |
10 |     let one_more_f64_nan = 0.0f64/0.0f64;
   |                            ^^^^^^^^^^^^^
   |
   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN

error: aborting due to 8 previous errors

