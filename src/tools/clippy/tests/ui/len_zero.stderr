error: item `PubOne` has a public `len` method but no corresponding `is_empty` method
  --> $DIR/len_zero.rs:6:1
   |
6  | / impl PubOne {
7  | |     pub fn len(self: &Self) -> isize {
8  | |         1
9  | |     }
10 | | }
   | |_^
   |
   = note: `-D len-without-is-empty` implied by `-D warnings`

error: trait `PubTraitsToo` has a `len` method but no (possibly inherited) `is_empty` method
  --> $DIR/len_zero.rs:55:1
   |
55 | / pub trait PubTraitsToo {
56 | |     fn len(self: &Self) -> isize;
57 | | }
   | |_^

error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method
  --> $DIR/len_zero.rs:89:1
   |
89 | / impl HasIsEmpty {
90 | |     pub fn len(self: &Self) -> isize {
91 | |         1
92 | |     }
...  |
96 | |     }
97 | | }
   | |_^

error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty` method
   --> $DIR/len_zero.rs:118:1
    |
118 | / impl HasWrongIsEmpty {
119 | |     pub fn len(self: &Self) -> isize {
120 | |         1
121 | |     }
...   |
125 | |     }
126 | | }
    | |_^

error: length comparison to zero
   --> $DIR/len_zero.rs:139:8
    |
139 |     if x.len() == 0 {
    |        ^^^^^^^^^^^^ help: using `is_empty` is more concise: `x.is_empty()`
    |
    = note: `-D len-zero` implied by `-D warnings`

error: length comparison to zero
   --> $DIR/len_zero.rs:143:8
    |
143 |     if "".len() == 0 {}
    |        ^^^^^^^^^^^^^ help: using `is_empty` is more concise: `"".is_empty()`

error: length comparison to zero
   --> $DIR/len_zero.rs:158:8
    |
158 |     if has_is_empty.len() == 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`

error: length comparison to zero
   --> $DIR/len_zero.rs:161:8
    |
161 |     if has_is_empty.len() != 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`

error: length comparison to zero
   --> $DIR/len_zero.rs:164:8
    |
164 |     if has_is_empty.len() > 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`

error: length comparison to one
   --> $DIR/len_zero.rs:167:8
    |
167 |     if has_is_empty.len() < 1 {
    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`

error: length comparison to one
   --> $DIR/len_zero.rs:170:8
    |
170 |     if has_is_empty.len() >= 1 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`

error: length comparison to zero
   --> $DIR/len_zero.rs:181:8
    |
181 |     if 0 == has_is_empty.len() {
    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`

error: length comparison to zero
   --> $DIR/len_zero.rs:184:8
    |
184 |     if 0 != has_is_empty.len() {
    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`

error: length comparison to zero
   --> $DIR/len_zero.rs:187:8
    |
187 |     if 0 < has_is_empty.len() {
    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`

error: length comparison to one
   --> $DIR/len_zero.rs:190:8
    |
190 |     if 1 <= has_is_empty.len() {
    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`

error: length comparison to one
   --> $DIR/len_zero.rs:193:8
    |
193 |     if 1 > has_is_empty.len() {
    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`

error: length comparison to zero
   --> $DIR/len_zero.rs:207:8
    |
207 |     if with_is_empty.len() == 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `with_is_empty.is_empty()`

error: length comparison to zero
   --> $DIR/len_zero.rs:220:8
    |
220 |     if b.len() != 0 {}
    |        ^^^^^^^^^^^^ help: using `is_empty` is more concise: `!b.is_empty()`

error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_empty` method
   --> $DIR/len_zero.rs:226:1
    |
226 | / pub trait DependsOnFoo: Foo {
227 | |     fn len(&mut self) -> usize;
228 | | }
    | |_^

error: aborting due to 19 previous errors

